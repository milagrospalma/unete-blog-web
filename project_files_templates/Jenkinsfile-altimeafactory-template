// Copy file in unete-blog-web/altimeafactory and rename file
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL
import java.net.URLEncoder

pipeline {
    agent {
      label 'master'
    }
    environment {
        PROJECT_NAME = "bgu"
        GITHUB_OAUTH_TOKEN = credentials('GITHUB_OAUTH_TOKEN_HEGEL')
        PULL_REQUEST = "${env.CHANGE_ID}"
        BRANCH_NAME  = "${env.BRANCH_NAME.replaceFirst('.+?/', '').replace(' ', '-')}";
        BRANCH_NAME_BUILD  = "${env.BRANCH_NAME.replace('/', '%2Fs')}";
    }
    stages {
        stage('Initialize') {
           steps {
              notifyBuild()
           }
        }
        stage("SonarQube analysis - PR") {
            when {
                expression { env.CHANGE_ID != null }
            }
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';

                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner " +
                        "-Dsonar.projectKey=blog-unete " +
                        "-Dproject.settings=altimeafactory/sonar-project.properties " +
                        "-Dsonar.analysis.mode=preview " +
                        "-Dsonar.github.pullRequest=${env.PULL_REQUEST} " +
                        "-Dsonar.github.oauth=${env.GITHUB_OAUTH_TOKEN} "
                    }
                }
            }
        }
        stage("SonarQube analysis - Full") {
            when {
                expression { isDevelop() }
            }
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';

                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner " +
                        "-Dsonar.projectKey=blog-unete:${BRANCH_NAME} " +
                        "-Dproject.settings=altimeafactory/sonar-project.properties "
                    }
                }
            }
        }
        stage('Deploy in Altimeafactory') {
            when {
                expression { isDevelop() }
            }
            steps {
                echo "Deploying project ${PROJECT_NAME} on ${BRANCH_NAME} ..."

                sh "docker build -t altimea/${PROJECT_NAME}:${BRANCH_NAME} \
                    --file altimeafactory/Dockerfile \
                    --build-arg VDOMAIN_SERVER=${PROJECT_NAME}-${BRANCH_NAME}.altimeafactory.com \
                    ."

                sh "docker stop ${PROJECT_NAME}_${BRANCH_NAME} || true"
                sh "docker rm -f ${PROJECT_NAME}_${BRANCH_NAME} || true"

                sh "docker run -m 1024m -d \
                   -e VIRTUAL_HOST=${PROJECT_NAME}-${BRANCH_NAME}.altimeafactory.com \
                   -e VIRTUAL_NETWORK=bridge \
                   -e LETSENCRYPT_HOST=${PROJECT_NAME}-${BRANCH_NAME}.altimeafactory.com \
                   -e LETSENCRYPT_EMAIL=hegel.chamba@altimea.com \
                   -v /home/ubuntu/altimeafactory_efs/deploys/permanent-files/projects/blogunete/.htaccess:/var/www/html/.htaccess \
                   -v /home/ubuntu/altimeafactory_efs/deploys/permanent-files/projects/blogunete/wp-config.php:/var/www/html/wp-config.php \
                   -v /home/ubuntu/altimeafactory_efs/deploys/permanent-files/projects/blogunete/robots.txt:/var/www/html/robots.txt \
                   -v /home/ubuntu/altimeafactory_efs/deploys/permanent-files/projects/blogunete/uploads:/var/www/html/wp-content/uploads \
                   --name ${PROJECT_NAME}_${BRANCH_NAME} \
                   altimea/${PROJECT_NAME}:${BRANCH_NAME}"
            }
        }
    }
    post {
        always {
           notifyBuild(currentBuild.result)
        }
        unstable {
           echo 'This will run only if the run was marked as unstable'
        }
    }
}

def isDevelop() {
    return env.BRANCH_NAME == "develop"
}

def notifyBuild(String buildStatus = 'STARTED') {
    // default build status in case is not passed as parameter
    buildStatus = buildStatus ?: 'SUCCESS'
    // variables and constants
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def from = 'jenkins@altimea.com'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def url = "https://ci.altimeafactory.com/blue/organizations/jenkins/Blog%20Unete/detail/${BRANCH_NAME_BUILD}/${env.BUILD_NUMBER}/pipeline/"
    def summary = "${subject} (${url})"
    def details = "<p>${buildStatus}: Job <a href='${url}}]</a></p>"

    // override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
        if(env.CHANGE_ID == null){
            subject = "${buildStatus}: View Project'"
            url = "https://${PROJECT_NAME}-${BRANCH_NAME}.altimeafactory.com"
            summary = "${subject} (${url})"
        }
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    slackSend (
        color: colorCode,
        message: summary,
        channel: '#jenkins-drone',
        teamDomain: 'altimea',
        tokenCredentialId: 'slack-tocken')
}
